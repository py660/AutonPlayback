{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_drive_smart = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nright_drive_smart = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 319.19, 40, MM, 1)\ncontroller_1 = Controller(PRIMARY)\nConveyer = Motor(Ports.PORT3, GearSetting.RATIO_6_1, False)\ndigital_out_a = DigitalOut(brain.three_wire_port.a)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\ncontroller = controller_1\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\ndef bprint(*args, **kwargs):\n    brain.screen.print(*args, **kwargs)\n    brain.screen.next_row()\n\ndef clearscreen():\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1,1)\n    brain.screen.set_font(FontType.MONO20)\n    brain.screen.set_fill_color(Color.RED)\n    brain.screen.set_pen_color(Color.RED)\n    brain.screen.draw_rectangle(0, 0, 480, 36)\n    brain.screen.set_pen_color(Color.WHITE)\n    bprint(\" \"*14 + \"AutonPlayback v1.0.0\")\n    brain.screen.set_font(FontType.MONO12)\n    brain.screen.set_cursor(3,1)\n    bprint(\" \"*18 + \"WRITE MODE ACTIVATED\")\n\n# CoOoOoOoOol credits, remove in prod\nbprint(\"-----------------------------------------------\")\nbprint(\"| Submit a PR: github.com/py660/AutonPlayback |\")\nbprint(\"-----------------------------------------------\")\n\ncontroller.rumble(\"-\")\nbprint(\"Please choose a save slot on the controller (X,Y,A,B)\")\ncontroller.rumble(\"..\")\n\ntry:\n    bprint(\"Opening drive sequence file for reading...\")\n    fseq = open(\"sequence.txt\", \"r\")\nexcept OSError as e:\n    bprint(\"File IO operation exited with\", e)\n    exit()\n\nbprint(\"File successfully opened. Reading inputs...\")\n\n\n\n\n\n# 480 x 240\n\n\n\n#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_drive_smart = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nright_drive_smart = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\ndrivetrain = DriveTrain(left_drive_smart, right_drive_smart, 319.19, 295, 40, MM, 1)\ncontroller_1 = Controller(PRIMARY)\nConveyer = Motor(Ports.PORT3, GearSetting.RATIO_6_1, True)\nIntake = Motor(Ports.PORT4, GearSetting.RATIO_18_1, True)\nPneumaticClaw = DigitalOut(brain.three_wire_port.a)\nDavidWhacker = Motor(Ports.PORT11, GearSetting.RATIO_6_1, False)\nFlash = DigitalOut(brain.three_wire_port.c)\n\nwait(30, MSEC)\n\ndef initializeRandomSeed():\n  wait(100, MSEC)\n  random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n  urandom.seed(int(random))\n  \ninitializeRandomSeed()\n\ndef play_vexcode_sound(sound_name):\n  print(\"VEXPlaySound:\" + sound_name)\n  wait(5, MSEC)\n\nwait(200, MSEC)\nprint(\"\\033[2J\")\n\n# define variables used for controlling motors based on controller inputs\ncontroller_1_left_shoulder_control_motors_stopped = True\ncontroller_1_right_shoulder_control_motors_stopped = True\ncontroller_1_x_b_buttons_control_motors_stopped = True\ndrivetrain_l_needs_to_be_stopped_controller_1 = False\ndrivetrain_r_needs_to_be_stopped_controller_1 = False\n\n\n\n\n# mainloop\ndef rc_auto_loop_function_controller_1():\n  global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, controller_1_left_shoulder_control_motors_stopped, controller_1_right_shoulder_control_motors_stopped, controller_1_x_b_buttons_control_motors_stopped, remote_control_code_enabled\n  # process the controller input every 20 milliseconds\n  # update the motors based on the input values\n  while True:\n      if remote_control_code_enabled:\n        \n          # calculate the drivetrain motor velocities from the controller joystick axies\n          # left = axis3\n          # right = axis2\n          drivetrain_left_side_speed = controller_1.axis3.position()\n          drivetrain_right_side_speed = controller_1.axis2.position()\n        \n          # check if the value is inside of the deadband range\n          if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n              # check if the left motor has already been stopped\n              if drivetrain_l_needs_to_be_stopped_controller_1:\n                  # stop the left drive motor\n                  left_drive_smart.stop()\n                  # tell the code that the left motor has been stopped\n                  drivetrain_l_needs_to_be_stopped_controller_1 = False\n          else:\n              # reset the toggle so that the deadband code knows to stop the left motor next\n              # time the input is in the deadband range\n              drivetrain_l_needs_to_be_stopped_controller_1 = True\n          # check if the value is inside of the deadband range\n          if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n              # check if the right motor has already been stopped\n              if drivetrain_r_needs_to_be_stopped_controller_1:\n                  # stop the right drive motor\n                  right_drive_smart.stop()\n                  # tell the code that the right motor has been stopped\n                  drivetrain_r_needs_to_be_stopped_controller_1 = False\n          else:\n              # reset the toggle so that the deadband code knows to stop the right motor next\n              # time the input is in the deadband range\n              drivetrain_r_needs_to_be_stopped_controller_1 = True\n        \n          # only tell the left drive motor to spin if the values are not in the deadband range\n          if drivetrain_l_needs_to_be_stopped_controller_1:\n              left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n              left_drive_smart.spin(FORWARD)\n          # only tell the right drive motor to spin if the values are not in the deadband range\n          if drivetrain_r_needs_to_be_stopped_controller_1:\n              right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n              right_drive_smart.spin(FORWARD)\n          # check the buttonL1/buttonL2 status\n          if controller_1.buttonDown.pressing():\n              PneumaticClaw.set(False)\n          elif controller_1.buttonUp.pressing():\n              PneumaticClaw.set(True)\n          # to control Conveyer\n          if controller_1.buttonL1.pressing():\n              Conveyer.set_velocity(2000)\n              Conveyer.spin(FORWARD)\n              controller_1_left_shoulder_control_motors_stopped = False\n          elif controller_1.buttonL2.pressing():\n              Conveyer.set_velocity(200)\n              Conveyer.spin(REVERSE)\n              controller_1_left_shoulder_control_motors_stopped = False\n          elif not controller_1_left_shoulder_control_motors_stopped:\n              Conveyer.stop()\n              # set the toggle so that we don't constantly tell the motor to stop when\n              # the buttons are released\n              controller_1_left_shoulder_control_motors_stopped = True\n          # check the buttonR1/buttonR2 status\n          # to control Intake\n          if controller_1.buttonR1.pressing():\n              Intake.set_velocity(1000)\n              Intake.spin(FORWARD)\n              controller_1_right_shoulder_control_motors_stopped = False\n          elif controller_1.buttonR2.pressing():\n              Intake.set_velocity(1000)\n              Intake.spin(REVERSE)\n              controller_1_right_shoulder_control_motors_stopped = False\n          elif not controller_1_right_shoulder_control_motors_stopped:\n              Intake.stop()\n              # set the toggle so that we don't constantly tell the motor to stop when\n              # the buttons are released\n              controller_1_right_shoulder_control_motors_stopped = True\n          # check the buttonX/buttonB status\n          # to control DavidWhacker\n          if controller_1.buttonB.pressing():\n              DavidWhacker.set_velocity(500)\n              DavidWhacker.spin(FORWARD)\n              controller_1_x_b_buttons_control_motors_stopped = False\n          elif controller_1.buttonX.pressing():\n              DavidWhacker.set_velocity(500)\n              DavidWhacker.spin(REVERSE)\n              controller_1_x_b_buttons_control_motors_stopped = False\n          elif not controller_1_x_b_buttons_control_motors_stopped:\n              DavidWhacker.stop()\n              # set the toggle so that we don't constantly tell the motor to stop when\n              # the buttons are released\n              controller_1_x_b_buttons_control_motors_stopped = True\n      # wait before repeating the process\n      wait(20, MSEC)\n\nstate = {\n    \"Left\": 0,\n    \"Right\": 0,\n    \"L1\": 0,\n    \"L2\": 0,\n    \"R1\": 0,\n    \"R2\": 0\n    \"Up\": 0,\n    \"Down\": 0,\n    \"X\": 0,\n    \"Y\": 0,\n    \"A\": 0,\n    \"B\": 0\n} # Left (Joystick), Right (Joystick), L1, L2, R1, R2, Up (Button), Down (Button), X, Y, A, B\n\nlog = []\n\ndef brainupdate():\n    for line in log[-10:]:\n        clearscreen()\n        bprint(\"\\t\".join(line))\n\nbrainupdate_thread = Thread(brainupdate)\n\ndef loadState():\n    global log, state\n    log = [(int(float(x.strip().split(\"\\t\")[0])*1000), x.strip().split(\"\\t\")[1], (bool(x.strip().split(\"\\t\")[2]) if \"e\" in x.strip().split(\"\\t\")[2] else int(x.strip().split(\"\\t\"))) for x in fseq.readlines()]\n    brain.timer.clear()\n\n    while len(log):\n        if brain.timer.time(MSEC) >= log[0][0]:\n            state[log[0][1]] = log[0][2]\n            log = log[1:]\n        else:\n            wait(1, MSEC)\n    \n    \n\nThread(loadState())\n\ndef autonPlayback():\n    global drivetrain_l_needs_to_be_stopped_controller_1, drivetrain_r_needs_to_be_stopped_controller_1, controller_1_left_shoulder_control_motors_stopped, controller_1_right_shoulder_control_motors_stopped, controller_1_x_b_buttons_control_motors_stopped, remote_control_code_enabled\n  # process the controller input every 20 milliseconds\n  # update the motors based on the input values\n  while True:\n      if remote_control_code_enabled:\n        \n          # calculate the drivetrain motor velocities from the controller joystick axies\n          # left = axis3\n          # right = axis2\n          drivetrain_left_side_speed = state[\"Left\"]\n          drivetrain_right_side_speed = state[\"Right\"]\n        \n          # check if the value is inside of the deadband range\n          if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:\n              # check if the left motor has already been stopped\n              if drivetrain_l_needs_to_be_stopped_controller_1:\n                  # stop the left drive motor\n                  left_drive_smart.stop()\n                  # tell the code that the left motor has been stopped\n                  drivetrain_l_needs_to_be_stopped_controller_1 = False\n          else:\n              # reset the toggle so that the deadband code knows to stop the left motor next\n              # time the input is in the deadband range\n              drivetrain_l_needs_to_be_stopped_controller_1 = True\n          # check if the value is inside of the deadband range\n          if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:\n              # check if the right motor has already been stopped\n              if drivetrain_r_needs_to_be_stopped_controller_1:\n                  # stop the right drive motor\n                  right_drive_smart.stop()\n                  # tell the code that the right motor has been stopped\n                  drivetrain_r_needs_to_be_stopped_controller_1 = False\n          else:\n              # reset the toggle so that the deadband code knows to stop the right motor next\n              # time the input is in the deadband range\n              drivetrain_r_needs_to_be_stopped_controller_1 = True\n        \n          # only tell the left drive motor to spin if the values are not in the deadband range\n          if drivetrain_l_needs_to_be_stopped_controller_1:\n              left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n              left_drive_smart.spin(FORWARD)\n          # only tell the right drive motor to spin if the values are not in the deadband range\n          if drivetrain_r_needs_to_be_stopped_controller_1:\n              right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n              right_drive_smart.spin(FORWARD)\n          # check the buttonL1/buttonL2 status\n          if state[\"Down\"]:\n              PneumaticClaw.set(False)\n          elif state[\"Up\"]:\n              PneumaticClaw.set(True)\n          # to control Conveyer\n          if state[\"L1\"]:\n              Conveyer.set_velocity(2000)\n              Conveyer.spin(FORWARD)\n              controller_1_left_shoulder_control_motors_stopped = False\n          elif state[\"L2\"]:\n              Conveyer.set_velocity(200)\n              Conveyer.spin(REVERSE)\n              controller_1_left_shoulder_control_motors_stopped = False\n          elif not controller_1_left_shoulder_control_motors_stopped:\n              Conveyer.stop()\n              # set the toggle so that we don't constantly tell the motor to stop when\n              # the buttons are released\n              controller_1_left_shoulder_control_motors_stopped = True\n          # check the buttonR1/buttonR2 status\n          # to control Intake\n          if state[\"R1\"]:\n              Intake.set_velocity(1000)\n              Intake.spin(FORWARD)\n              controller_1_right_shoulder_control_motors_stopped = False\n          elif state[\"R2\"]:\n              Intake.set_velocity(1000)\n              Intake.spin(REVERSE)\n              controller_1_right_shoulder_control_motors_stopped = False\n          elif not controller_1_right_shoulder_control_motors_stopped:\n              Intake.stop()\n              # set the toggle so that we don't constantly tell the motor to stop when\n              # the buttons are released\n              controller_1_right_shoulder_control_motors_stopped = True\n          # check the buttonX/buttonB status\n          # to control DavidWhacker\n          if state[\"B\"]:\n              DavidWhacker.set_velocity(500)\n              DavidWhacker.spin(FORWARD)\n              controller_1_x_b_buttons_control_motors_stopped = False\n          elif state[\"X\"]:\n              DavidWhacker.set_velocity(500)\n              DavidWhacker.spin(REVERSE)\n              controller_1_x_b_buttons_control_motors_stopped = False\n          elif not controller_1_x_b_buttons_control_motors_stopped:\n              DavidWhacker.stop()\n              # set the toggle so that we don't constantly tell the motor to stop when\n              # the buttons are released\n              controller_1_x_b_buttons_control_motors_stopped = True\n      # wait before repeating the process\n      wait(20, MSEC)\n\ndef resetState():\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\n\n#endregion VEXcode Generated Robot Configuration\n\ndef onauton_autonomous_0():\n    pass\n\ndef ondriver_drivercontrol_0():\n    pass\n\n# create a function for handling the starting and stopping of all autonomous tasks\ndef vexcode_auton_function():\n  # Start the autonomous control tasks\n  playback_task = Thread(autonPlayback)\n  auton_task_0 = Thread(onauton_autonomous_0)\n  # wait for the driver control period to end\n  while( competition.is_autonomous() and competition.is_enabled() ):\n      # wait 10 milliseconds before checking again\n      wait(10, MSEC)\n  # Stop the autonomous control tasks\n  playback_task.stop()\n  auton_task_0.stop()\n\n  resetState()\n\n\ndef vexcode_driver_function():\n  # Start the driver control tasks\n  rc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n  drive_control_task_0 = Thread( ondriver_drivercontrol_0() )\n  # wait for the driver control period to end\n  while( competition.is_driver_control() and competition.is_enabled() ):\n      # wait 10 milliseconds before checking again\n      wait(10, MSEC)\n  # Stop the driver control tasks\n  drive_control_task_0.stop()\n  rc_auto_loop_thread_controller_1.stop()\n\n\n# register the competition functions\ncompetition = Competition( vexcode_driver_function, vexcode_auton_function )\n# Yo Yo Yo What's Up Saxe Middle School?!","textLanguage":"python","robotConfig":[{"port":[1,2,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"319.19","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[3],"name":"Conveyer","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[1],"name":"digital_out_a","customName":false,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22}],"slot":7,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.5","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}